{
  "paragraphs": [
    {
      "text": "%spark \nimport kafka.serializer.StringDecoder\n//import com.datastax.spark.connector.streaming._\n//import org.apache.spark.streaming.{Seconds, StreamingContext}\n//import org.apache.spark.{TaskContext, SparkConf}\nimport org.apache.spark.streaming._\nimport org.apache.spark.streaming.kafka.{OffsetRange, HasOffsetRanges, KafkaUtils}\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.functions._\n\nimport sqlContext.implicits._\nimport spark.implicits._\nimport java.util.UUID\n\nval ssc \u003d new StreamingContext(sc, Seconds(5))\nimport com.datastax.spark.connector.streaming._\n//val sqlContext \u003d new SQLContext(sc)",
      "dateUpdated": "Sep 5, 2016 4:13:55 PM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {},
          "map": {
            "baseMapType": "Streets",
            "isOnline": true,
            "pinCols": []
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1472629185346_-1341830746",
      "id": "20160726-065534_1308137064",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nimport kafka.serializer.StringDecoder\n\nimport org.apache.spark.streaming._\n\nimport org.apache.spark.streaming.kafka.{OffsetRange, HasOffsetRanges, KafkaUtils}\n\nimport org.apache.spark.sql._\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.sql.functions._\n\nimport sqlContext.implicits._\n\nimport spark.implicits._\n\nimport java.util.UUID\n\nssc: org.apache.spark.streaming.StreamingContext \u003d org.apache.spark.streaming.StreamingContext@5c1058f5\n\nimport com.datastax.spark.connector.streaming._\n"
      },
      "dateCreated": "Aug 31, 2016 7:39:45 AM",
      "dateStarted": "Sep 5, 2016 4:13:55 PM",
      "dateFinished": "Sep 5, 2016 4:14:10 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark \n  val generateUUID \u003d udf(() \u003d\u003e UUID.randomUUID().toString)    \n\n  val topicsSet \u003d Set(\"my_topic\")\n  val brokers \u003d sys.env(\"KAFKA_ADDRESS\")\n  val kafkaParams \u003d Map[String, String](\"metadata.broker.list\" -\u003e brokers)\n  val messages \u003d KafkaUtils.createDirectStream[String, String, StringDecoder, StringDecoder](ssc, kafkaParams, topicsSet)\n  val schema \u003d StructType(StructField(\"name\",StringType,false)::StructField(\"value\", IntegerType, false)::StructField(\"time\", TimestampType, false)::Nil)\n  //sqlContext.createExternalTable(\"bTable\", \"parquet\", schema, Map(\"path\" -\u003e \"/usr/zeppelin/data/\"))\n  //val df \u003d sqlContext.createExternalTable(\"bigTable\",\"/usr/zeppelin/data/bigTable\")\n  //df.schema(schema)\n  messages.foreachRDD { (rdd,time) \u003d\u003e\n//        println(time)\n        val t \u003d time.milliseconds\n        val dataDF \u003d sqlContext.read.json(rdd.map(_._2)).withColumn(\"time\", lit(t).cast(\"timestamp\")).withColumn(\"id\", generateUUID())\n//        dataDF.printSchema()\n        dataDF.createOrReplaceTempView(\"mytable\")\n        \n        dataDF.write.format(\"parquet\").mode(\"append\").save(\"/usr/zeppelin/data/datalake.parquet\")\n        val allValues \u003d sqlContext.sql(\"select name as prod, value, time as timestamp, id  from mytable \")\n        allValues.write.format(\"org.apache.spark.sql.cassandra\").option(\"header\",\"false\").mode(\"append\").options(Map( \"table\" -\u003e \"all_results\", \"keyspace\" -\u003e \"mio\")).save()\n        val averageValues \u003d sqlContext.sql(\"select name as prod, AVG(value) as average, first(time) as timestamp from mytable group by name\")\n        averageValues.show()\n        averageValues.write.format(\"org.apache.spark.sql.cassandra\").option(\"header\",\"false\").mode(\"overwrite\").options(Map( \"table\" -\u003e \"results\", \"keyspace\" -\u003e \"mio\")).save()\n//        sqlContext.parquetFile( \"/usr/zeppelin/data/datalake.parquet\" )\n//          .coalesce(6)\n//          .write.parquet(\"/usr/zeppelin/data/all.parquet\")\n  }\n// Start the computation\nssc.start()\n//ssc.awaitTerminationOrTimeout(30 * 1000)\n",
      "dateUpdated": "Sep 5, 2016 4:13:55 PM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "graph": {
          "mode": "table",
          "height": 111.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {},
          "map": {
            "baseMapType": "Streets",
            "isOnline": true,
            "pinCols": []
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1472629185386_-1357220702",
      "id": "20160726-072729_926033663",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\ngenerateUUID: org.apache.spark.sql.expressions.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction0\u003e,StringType,Some(List()))\n\ntopicsSet: scala.collection.immutable.Set[String] \u003d Set(my_topic)\n\nbrokers: String \u003d kafka:9092\n\nkafkaParams: scala.collection.immutable.Map[String,String] \u003d Map(metadata.broker.list -\u003e kafka:9092)\n\nmessages: org.apache.spark.streaming.dstream.InputDStream[(String, String)] \u003d org.apache.spark.streaming.kafka.DirectKafkaInputDStream@63afea03\n\nschema: org.apache.spark.sql.types.StructType \u003d StructType(StructField(name,StringType,false), StructField(value,IntegerType,false), StructField(time,TimestampType,false))\n"
      },
      "dateCreated": "Aug 31, 2016 7:39:45 AM",
      "dateStarted": "Sep 5, 2016 4:13:59 PM",
      "dateFinished": "Sep 5, 2016 4:14:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql select name as prod, value, time as timestamp, id  from mytable",
      "dateUpdated": "Sep 5, 2016 4:15:14 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "helium": {},
        "graph": {
          "mode": "multiBarChart",
          "height": 168.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "prod",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "yAxis": {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          },
          "map": {
            "baseMapType": "Streets",
            "isOnline": true,
            "pinCols": []
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1472629185388_-1359529196",
      "id": "20160726-094150_302242907",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "prod\tvalue\ttimestamp\tid\nprod3\t515\t48650-06-07 04:46:40.0\t6ceae7ff-da09-4b09-a145-46fc75f5dc6f\nprod3\t832\t48650-06-07 04:46:40.0\tf27ce085-894a-46d4-95a8-0d870e0f4572\nprod1\t950\t48650-06-07 04:46:40.0\t00d912f4-d3a3-4596-8231-5a13da3c62bd\nprod2\t732\t48650-06-07 04:46:40.0\t7c310680-ca18-4bfa-8655-c0a28960665f\nprod2\t92\t48650-06-07 04:46:40.0\tc10bdbfa-1217-40df-b975-5cb5ce840dcc\nprod1\t425\t48650-06-07 04:46:40.0\t87a589f6-6a8f-4929-8af5-0916de2085df\nprod3\t729\t48650-06-07 04:46:40.0\t85748933-7439-43cd-8c8b-9cf271911d1f\nprod4\t692\t48650-06-07 04:46:40.0\t5fbbcd78-22b0-441d-ade7-79de208f9fa0\nprod1\t208\t48650-06-07 04:46:40.0\tc5da3a3d-bdda-4510-af71-4b2f54c8ebe7\nprod3\t241\t48650-06-07 04:46:40.0\tc51d0203-d3ff-4845-842d-059d8cb4501e\nprod1\t116\t48650-06-07 04:46:40.0\t3625978c-95a1-4ea3-9cb2-ff77f99245a5\nprod2\t822\t48650-06-07 04:46:40.0\t2a77a76a-d9bb-4839-bd13-fd0ccd7fe150\nprod2\t571\t48650-06-07 04:46:40.0\t485bd79a-94ea-4b7e-bdf8-c1d12cd0411a\nprod1\t773\t48650-06-07 04:46:40.0\t39ce6f4f-8ad1-433e-a8a2-386434851b94\nprod1\t163\t48650-06-07 04:46:40.0\t5866715e-694a-4213-ae7f-ac03e7f0c83f\nprod4\t235\t48650-06-07 04:46:40.0\t09e0440a-af47-4cba-a2f0-7e755330bafa\nprod3\t744\t48650-06-07 04:46:40.0\t358655c8-69f2-49fc-a465-79b04b5568ec\nprod3\t174\t48650-06-07 04:46:40.0\t2787253d-d595-474f-bf71-08851fdc2763\nprod2\t222\t48650-06-07 04:46:40.0\t5be00b49-b8a5-4bce-b400-323cae14bcc1\nprod2\t20\t48650-06-07 04:46:40.0\t83f28041-f917-47ea-b20d-59e0cbe438a1\nprod3\t793\t48650-06-07 04:46:40.0\t98e0615a-caa1-4580-9932-21e947310f4c\nprod3\t62\t48650-06-07 04:46:40.0\t6d93ca28-85ea-41a3-beca-981725a9ba15\nprod4\t172\t48650-06-07 04:46:40.0\tdf92ed6e-afca-464b-934a-3efb9af77560\nprod1\t483\t48650-06-07 04:46:40.0\t98de6483-661d-4ca6-a84d-4e0f542c75fe\nprod1\t286\t48650-06-07 04:46:40.0\tc3d7ed35-cafb-488e-890f-e508a475f938\nprod2\t49\t48650-06-07 04:46:40.0\tad64808b-67be-4afc-8179-b0530e9b5ba7\nprod1\t216\t48650-06-07 04:46:40.0\t204dd40e-dbe4-4586-8fc0-b1f6c4e9a725\nprod3\t70\t48650-06-07 04:46:40.0\t4d1c0ce8-1d02-489c-ae88-959f03d7c69a\nprod3\t547\t48650-06-07 04:46:40.0\tb0d48571-639c-4ead-a498-87fb3fdbeedd\nprod4\t253\t48650-06-07 04:46:40.0\t8deba854-a0fd-4fdd-90e7-65d64e38b3e9\nprod2\t727\t48650-06-07 04:46:40.0\t37415097-4f64-49e4-abb2-d93c28e8636f\nprod2\t348\t48650-06-07 04:46:40.0\t03d2cdb8-8f67-4d91-8b0c-11829938a77f\nprod2\t791\t48650-06-07 04:46:40.0\tc816a655-9485-4d54-be6d-f3fe73ae1221\nprod2\t425\t48650-06-07 04:46:40.0\t3342d6cf-1cd0-439b-b86e-b7ab4574c7f6\nprod3\t216\t48650-06-07 04:46:40.0\t2876e063-a56d-4ac4-9194-24787367a4d1\nprod1\t893\t48650-06-07 04:46:40.0\tb8c9fdf0-7b2b-4ce4-bf7a-57050b4a744d\nprod1\t895\t48650-06-07 04:46:40.0\t16f02823-2904-497e-a7a4-1f052ab8942f\nprod1\t521\t48650-06-07 04:46:40.0\t975c8fc6-2a58-490c-b8d7-c3b4dfa71180\nprod2\t690\t48650-06-07 04:46:40.0\tb715d5e4-a655-494c-9563-5109c176f000\nprod1\t517\t48650-06-07 04:46:40.0\t50bf31e8-0be2-4731-aff9-500dddc8eb8e\nprod2\t719\t48650-06-07 04:46:40.0\t7f1fdf74-6407-4afd-9f72-4150f3be41fe\nprod4\t111\t48650-06-07 04:46:40.0\td9b3f9ae-a51a-4479-9a6b-7786a6019249\nprod4\t168\t48650-06-07 04:46:40.0\tf660aef8-b604-4c75-a253-1d86d636839b\nprod4\t113\t48650-06-07 04:46:40.0\t246c23b0-68af-45bd-bc97-652f39adbec9\nprod4\t536\t48650-06-07 04:46:40.0\t254e4c7e-89e9-4e10-9f30-6d64c2c2980e\nprod2\t379\t48650-06-07 04:46:40.0\tcfa164bb-8c9e-4c06-8e3c-d424b93fc91a\nprod1\t880\t48650-06-07 04:46:40.0\t6a4725f2-772f-4075-a90b-0df24e7d1b3b\nprod1\t919\t48650-06-07 04:46:40.0\tc8d8f2e5-43da-4eec-b3fa-9133d3426837\nprod4\t874\t48650-06-07 04:46:40.0\tdb35bb18-a514-4307-9e2a-1bbb8657c28a\nprod2\t932\t48650-06-07 04:46:40.0\t90a95edc-7c3a-4506-b5e6-f35f2392a61b\n"
      },
      "dateCreated": "Aug 31, 2016 7:39:45 AM",
      "dateStarted": "Sep 5, 2016 4:15:14 PM",
      "dateFinished": "Sep 5, 2016 4:15:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark \nval mydf \u003dsqlContext.sql(\"select * from mytable\")\nmydf.show()\n//ssc.awaitTerminationOrTimeout(30 * 1000)\n//ssc.stop(stopSparkContext\u003dtrue, stopGracefully\u003dtrue)",
      "dateUpdated": "Sep 5, 2016 4:13:55 PM",
      "config": {
        "tableHide": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {},
          "map": {
            "baseMapType": "Streets",
            "isOnline": true,
            "pinCols": []
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1472629185389_-1359913945",
      "id": "20160726-082126_24115141",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\norg.apache.spark.sql.AnalysisException: Table or view not found: mytable; line 1 pos 14\n  at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)\n  at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.org$apache$spark$sql$catalyst$analysis$Analyzer$ResolveRelations$$lookupTableFromCatalog(Analyzer.scala:449)\n  at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$$anonfun$apply$8.applyOrElse(Analyzer.scala:468)\n  at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$$anonfun$apply$8.applyOrElse(Analyzer.scala:453)\n  at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:61)\n  at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:61)\n  at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:69)\n  at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:60)\n  at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n  at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:58)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:321)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:179)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:319)\n  at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:58)\n  at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.apply(Analyzer.scala:453)\n  at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveRelations$.apply(Analyzer.scala:443)\n  at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:85)\n  at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:82)\n  at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:124)\n  at scala.collection.immutable.List.foldLeft(List.scala:84)\n  at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:82)\n  at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:74)\n  at scala.collection.immutable.List.foreach(List.scala:381)\n  at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:74)\n  at org.apache.spark.sql.execution.QueryExecution.analyzed$lzycompute(QueryExecution.scala:65)\n  at org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:63)\n  at org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:51)\n  at org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:64)\n  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:582)\n  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:682)\n  ... 60 elided\n"
      },
      "dateCreated": "Aug 31, 2016 7:39:45 AM",
      "dateStarted": "Sep 5, 2016 4:14:15 PM",
      "dateFinished": "Sep 5, 2016 4:14:16 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark ",
      "dateUpdated": "Sep 5, 2016 4:13:55 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {},
          "map": {
            "baseMapType": "Streets",
            "isOnline": true,
            "pinCols": []
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1472629185390_-1358759698",
      "id": "20160726-144125_667601238",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Aug 31, 2016 7:39:45 AM",
      "dateStarted": "Sep 5, 2016 4:14:15 PM",
      "dateFinished": "Sep 5, 2016 4:14:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Streaming2",
  "id": "2BVH2Y24H",
  "lastReplName": {
    "value": "sql"
  },
  "angularObjects": {
    "2BW92AJ26:shared_process": [],
    "2BUE7YEUC:shared_process": [],
    "2BWYTCJZC:shared_process": [],
    "2BX6TPWNA:shared_process": [],
    "2BVS7W5AE:shared_process": [],
    "2BV15NK82:shared_process": [],
    "2BUVCFMWC:shared_process": [],
    "2BX44T9KJ:shared_process": [],
    "2BUQNY71C:shared_process": []
  },
  "config": {},
  "info": {}
}